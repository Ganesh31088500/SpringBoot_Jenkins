pipeline {
  agent any // a node with Docker installed
  tools {
    jdk 'jdk17' // Configure in Manage Jenkins > Tools (name must match)
    maven 'maven3' // Configure in Manage Jenkins > Tools (name must match)
  }
  options {
    skipDefaultCheckout(true)
    timestamps()
  }

  environment {
    // SONAR_URL = "http://52.66.196.155:9000"
     SONARQUBE_SERVER = "SonarQube"
    GIT_REPO_NAME = "SpringBoot_Jenkins"
    GIT_USER_NAME = "Ganesh31088500"
    DOCKER_IMAGE = "ganeshpitchuka3108/ultimate-cicd:${BUILD_NUMBER}"
    PATH = "/usr/share/maven/bin:/usr/bin:/bin" // Optional: ensures mvn is available
  }

  stages {
    stage('Debug agent') {
      steps {
       sh '''
            echo "Inside the custom jenkins docker agent"
whoami
mvn -v
docker --version
git --version
'''
      }
    }
stage('Cleanup') {
  steps {
    cleanWs()
  }
}


    stage('Checkout') {
      steps {
        checkout scm
      }
    }


stage('Build & Test (Maven)') {
  steps {
    dir('SpringBootAPIs') { // ⬅️ navigate into the subdirectory
      sh 'mvn -B -DskipTests=false clean package'
    }
  }
}


stage('SonarQube Analysis') {
  steps {
    withCredentials([string(credentialsId: 'sonar-token-id', variable: 'SONAR_AUTH_TOKEN')]) {
      withSonarQubeEnv("${SONARQUBE_SERVER}") {
        dir('SpringBootAPIs') {
          sh """
            mvn sonar:sonar \
              -Dsonar.projectKey=springboot-app \
              -Dsonar.host.url=${SONAR_HOST_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN}
          """
        }
      }
    }
  }
}



stage('Build and Push Docker Image') {
  steps {
    script {
      dir('SpringBootAPIs') {
        sh """
          docker build -t ${DOCKER_IMAGE} .
        """
        def dockerImage = docker.image("${DOCKER_IMAGE}")
        docker.withRegistry('https://index.docker.io/v1/', "dockerhub-creds-id") {
          dockerImage.push()
        }
      }
    }
  }
}

 stage('Update Deployment File') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
          sh """
            git config user.email "ganeshpitchuka8@gmail.com"
            git config user.name "Ganesh31088500"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" SpringManifest/deployment.yml
            git add SpringManifest/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || true
            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          """
        }
      }
    }

  }
}
